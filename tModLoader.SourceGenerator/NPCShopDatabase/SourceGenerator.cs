using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;

namespace tModLoader.SourceGenerator.NPCShopDatabase;

[Generator(LanguageNames.CSharp)]
public sealed class SourceGenerator : IIncrementalGenerator
{
	public void Initialize(IncrementalGeneratorInitializationContext ctx)
	{
		var pipeline = ctx.SyntaxProvider.ForAttributeWithMetadataName(
			"Terraria.ModLoader.__InternalDoNotUseVanillaSetupShopAttribute",
			static (node, _) => node is MethodDeclarationSyntax { Body: not null },
			static (ctx, token) => {
				var methodDeclarationNode = (MethodDeclarationSyntax)ctx.TargetNode;

				var walker = new VanillaSetupShopMethodWalker();

				foreach (var statement in methodDeclarationNode.Body!.Statements) {
					if (statement is SwitchStatementSyntax switchStatementSyntax) {
						walker.VisitShopsSwitchStatement(switchStatementSyntax);
						goto breakOutOfLoops;
					}
				}

			breakOutOfLoops:;

				return walker.Shops;
			})
			.SelectMany(static (models, _) => models);

		ctx.RegisterSourceOutput(pipeline, static (ctx, source) => {
			ctx.AddSource($"NPCShopDatabase{source.Id}.g.cs", SourceText.From(GenerateSourceText(source), Encoding.UTF8));
		});

		static string GenerateSourceText(Model.Shop shopModel)
		{
			var w = new IndentedStringBuilder();

			w.WriteLine("// <auto-generated/>");
			w.WriteLine("namespace Terraria.ModLoader;");

			w.WriteLine("partial class NPCShopDatabase");
			using (w.WriteBlock()) {
				w.WriteLine("[global::System.Runtime.CompilerServices.CompilerGeneratedAttribute]");
				w.WriteLine($"private static void RegisterVanillaShop{shopModel.Id}()");
				using (w.WriteBlock()) {
					w.WriteLine($"var npcShop = new global::Terraria.ModLoader.NPCShop(_shopIdToNpcId[{shopModel.Id}], _shopNameFromNpcId[{shopModel.Id}] ?? \"Shop\");");

					foreach (var item in shopModel.Items) {
						if (item.Conditions.IsEmpty) {
							w.WriteLine($"npcShop.Add({item.Id});");
						}
						else {
							w.WriteLine($"npcShop.Add({item.Id}, {string.Join(", ", item.Conditions.Select(x => {
								int? d1 = x.Data1;
								int? d2 = x.Data2;

								return $"global::Terraria.Condition.{x.Type}" + x.Type switch {
									Model.Shop.Condition.ConditionType.PlayerCarriesItem => !d2.HasValue ? $"({d1.Value})" : $"({d1.Value}, {d2.Value})",
									Model.Shop.Condition.ConditionType.GolfScoreOver => $"({d1.Value})",
									Model.Shop.Condition.ConditionType.NpcIsPresent => $"({d1.Value})",
									Model.Shop.Condition.ConditionType.BestiaryFilledPercent => $"({d1.Value})",
									_ => string.Empty
								};
							}).Reverse())});");
						}
					}

					w.WriteLine("npcShop.Register();");
				}
			}

			return w.ToString();
		}
	}
}
